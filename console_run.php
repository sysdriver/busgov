<?php//link parserinclude_once('simplehtmldom/simple_html_dom.php');class Agency {    const BG_SITE = 'http://bus.gov.ru';    //static public $strtPage = "/public/agency/quickSearch/searchNew.html?searchString=";    static public $pages = array (        'srchPg'	=>	'/public/agency/quickSearch/searchNew.html?searchString=',        'mainPg'	=>	'/public/agency/agency.html?agency=',    );    static public $flgPages = array (        'mcpZdn'	=>	'http://www.bus.gov.ru/public/agency/agency_tasks.html?agency=',        'bdtSmt'	=>	'http://www.bus.gov.ru/public/agency/budget.html?agency=',        'fhd'		=>	'http://www.bus.gov.ru/public/agency/agency_plans.html?agency=',        'clvSrdst'	=>	'http://www.bus.gov.ru/public/agency/operations.html?agency=',        //''		=>	'',    );    public $agcId;    public $addr;    public $contacts;    public $email;    public $head;    public $inn;    public $agcName;    public $flags = array();    public $info;	//array('date' => elements    public $page;	//full web address    public $services;	//what service deliver agency    public function __construct($inn) {        $this->inn 		=	$inn;        $this->page = self::BG_SITE.self::$pages['srchPg'].$inn;        if($this->get_info($this->page)) {	//if parsing was successful            $this->page = self::BG_SITE.self::$pages['mainPg'].$this->agcId;		//prepare next page            $this->getFlags($this->page);        }    }    private function curl_init($page) {        $ch = curl_init();        curl_setopt($ch, CURLOPT_URL, $page);        //curl_setopt($ch, CURLOPT_HEADER, TRUE);		//вывод заголовков в ответе        $headers = array(	//taken from firebug            'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',            'Accept-Encoding: gzip, deflate',            'Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',            'Connection: keep-alive',            'Host: bus.gov.ru',            'User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:23.0) Gecko/20100101 Firefox/23.0',        );        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);        curl_setopt($ch, CURLOPT_ENCODING , "gzip");	//un gzip        curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);		//output results into var instead of output in browser        //curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, 1000);        //curl_setopt($ch, CURLOPT_TIMEOUT,1000%1000);        $return = curl_exec($ch);        $info = curl_errno($ch);        curl_close($ch);        unset($ch);        if($info||strlen($return)==0)                return 0;                //die('There are no answer from server.');        return $return;    }	    public function save() {    }    private function get_info($page) {        if($str = $this->curl_init($page)) {            //print_r($str);            //die;            $html = str_get_html($str);		//receive html object            if(count($html->find('div.result-element'))) {                foreach($html->find('div.result-element') as $div) {                    //echo $div->innertext;                    if(count($div->find('a.result-title'))) {                        foreach($div->find('a.result-title') as $a) {                            //echo $a->href;                            $name = $a->innertext;                            $link = $a->href;                        }                    }                    if(count($div->find('div.address'))) {                        foreach($div->find('div.address span') as $adr) {                            $address = $adr->innertext;                        }                    }                    if(count($div->find('div.services'))) {                        foreach($div->find('div.services') as $srv) {                            if($srv->find('a.result-service')) {                                foreach($srv->find('a.result-service') as $res_srv) {                                        $services = $res_srv->innertext;                                }                            }                        }                    }                }            }            $str = explode("                                                     ", trim($address));		//53 spaces            //print_r($str);            //die;            $this->addr = trim($str[0]);            $this->contacts = trim($str[1]);            $this->services = trim($services);            $this->agcName = trim($name);            $this->agcId = mb_substr($link,34,5);            $html->clear();		//get away from memory leaks            return 1;        }        else            return 0;    }	    public function getFlags($page) {        if($str = $this->curl_init($page)) {            $html = str_get_html($str);		//receive html object            if(count($html->find('div[class=wrapTable_2 agencyDocumentTab]'))) {                $div = $html->find('div[class=wrapTable_2 agencyDocumentTab]',0);                //echo $div->innertext;                //die;                if(count($div->find('table tbody'))) {                    $tbody = $div->find('tbody',0);                    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -                     //http://stackoverflow.com/questions/2340952/tbody-glitch-in-php-simple-html-dom-parser                    //in simple_html_dom.php file comment or remove line #396                    // if ($m[1]==='tbody') continue;                    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -                     //$tbody = $tbody->find('tbody',0);                    //print_r($tbody->innertext);                    //die;                    $table = array();                    $tblHeaders = array(                        'flName',                        'stName',                        'ppO',                        'polnomochiya',                        'grbs',                        'codGlavyGrbs',                        'rbsName',                        'ofcType',                        'ofcKind',                        'okved',                        'okato',                        'oktmo',                        'pptType',      //property type                        'ofcTypeOkpf',                          'address',                        'head',                        'phone',                        'email',                    );                    foreach($tbody->find('tr') as $row => $tr) {                        $td = $tr->find('td',1);		//receive only values without headers                        //foreach($tr->find('td') as $td)                        if(!empty($td->plaintext))                            $table[$tblHeaders[$row]] = trim($td->plaintext);                    }            //print_r($table);            //die;                    foreach($div->find('a.result-title') as $a) {                        //echo $a->href;                        $name = $a->innertext;                        $link = $a->href;                    }                    $this->email = $table['email'];                    $this->head = $table['head'];                }            }            $html->clear();		//get away from memory leaks            //print_r($str);            //die;        }    }	    public function getAllFlags($flag,$agcId) {        $page = self::$flgPages[$flag].$agcId;        if($str = $this->curl_init($page)) {            $html = str_get_html($str);		//receive html object            if(count($html->find('div[class=wrapTable_2]'))) {                $div = $html->find('div[class=wrapTable_2]',0);                if(count($div->find('table tbody'))) {                    $tbody = $div->find('tbody',0);                    foreach($tbody->find('tr') as $row => $tr) {                        $td = $tr->find('td',1);                        //$td = $tr->find('td',2);	//receive publication date                        //в данном случае может быть инф. за 2012, 2013 год, но выведется сюда                        //только за 2013, т.к. foreach закончится на последнем элементе                        if(!empty($td->plaintext))                            $this->flags[date('d.m.Y')][$flag] = 1;                        else {                            $this->flags[date('d.m.Y')][$flag] = 0;                        }                    }                }            }            //print_r($this->flags);            ///die;            $html->clear();		//get away from memory leaks            return 1;        }        else            return 0;    }    public function doLog() {    }//END Agency class	}//"/public/agency/quickSearch/searchNew.html?searchString=";//$agency->inn;$inns = array (    '6685000377',    '6652012426',    '6652012338',    '6652016639',    '6652011694',    '6652011704',    '6652021879',    '6652025190',    '6652015226',    '6652027870',    '6652019848',    '6652030256',    '6652027895',    '6652015515',);$agncs = array();/*    foreach($inns as $key => $inn) {        $agncs[$key] = new Agency($inn);        //ask 4 flags by every agc        foreach(Agency::$flgPages as $flag => $page) {            //if($flag !== 'mcpZdn' && $flag !== 'fhd')            //if($flag !== 'mcpZdn' && $flag !== 'fhd')            //if($flag !== 'mcpZdn' && $flag !== 'fhd')            //if($flag !== 'mcpZdn' && $flag !== 'fhd')            $agncs[$key]->getAllFlags($flag,$agncs[$key]->agcId);        }    } *///@todo: here add batch on $agncs$i = 0;while($innPart = array_splice($inns,0,5)) {   //take 5 elements per iteration    //print_r($innPart);    //die;    foreach($innPart as $inn) {        $agncs[$i] = new Agency($inn);        //ask 4 flags by every agc        foreach(Agency::$flgPages as $flag => $page) {            $agncs[$i]->getAllFlags($flag,$agncs[$i]->agcId);        }        $i++;    }    //echo $agncs[$i-1]->agcName;    //sleep(5);  //to reduce memory consuming we need to save data objects to }header('Content-Type: text/html; charset=utf-8');	//set utf-8 header via phpprint_r($agncs);die;